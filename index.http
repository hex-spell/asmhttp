HTTP/1.0 200 OK
Content-Type: text/html
Content-Length: 12368
Connection: close

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>JASG - Just Another Snake Game</title>
    <style>
      @import url("https://fonts.googleapis.com/css2?family=Press+Start+2P&display=swap");
      body {
        display: flex;
        justify-content: center;
        align-items: center;
        flex-direction: column;
        font-family: "Press Start 2P";
        color: white;
        background-color: darkblue;
      }
      #table {
        width: 70vh;
        height: 70vh;
        max-width: 70vw;
        max-height: 70vw;
        background-color: black;
        display: grid;
        grid-template-columns: repeat(10, 1fr);
        grid-template-rows: repeat(10, 1fr);
        border: 5px dashed white;
      }
      #scoresTable {
        border: 5px dashed white;
        background-color: black;
        display: flex;
        flex-direction: column;
        max-height: 80vw;
        height: 80vh;
        width: 300px;
        max-width: 30vw;
        position: absolute;
        left: 30px;
        bottom: 15px;
      }
      .scoreHeader,
      .scoreRow {
        display: flex;
        justify-content: space-between;
        padding: 15px;
      }
      .scoreHeader,
      .scoreRow:not(:last-child) {
        border-bottom: 2px dashed white;
      }
      .scorePoints {
        padding-left: 15px;
        text-align: center;
      }
      .tableHeader {
        height: 35px;
        background-color: blue;
        padding: 8px;
        padding-top: 15px;
        color: white;
      }
      #gameOver {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        display: flex;
        justify-content: center;
        align-items: center;
        color: black;
      }
      .backdrop {
        position: absolute;
        width: 100%;
        height: 100%;
        background-color: black;
        opacity: 0.8;
        z-index: 9;
      }
      .gameOverCard {
        background-color: darkblue;
        color: white;
        display: flex;
        justify-content: center;
        flex-direction: column;
        border: 5px dashed white;
        z-index: 10;
        padding: 12px;
      }
      .actionButtons {
        display: flex;
        justify-content: flex-end;
      }
      .hidden {
        display: none !important;
      }
      .button {
        border-radius: none;
        border: 5px dotted black;
        color: white;
        background-color: darkgreen;
        font-family: "Press Start 2P";
        padding: 10px;
        cursor: pointer;
        margin-left: 15px;
        transition: background-color 400ms linear;
      }
      .disabled {
        background-color: grey;
      }
      .button:hover {
        border: 5px dotted white;
      }
      .userInput {
        padding: 10px;
        font-size: 1.5rem;
        margin-bottom: 15px;
        background-color: black;
        color: white;
        font-family: "Press Start 2P";
      }
      @media (max-width: 1230px) {
        #scoresTable {
          display: none;
        }
      }
    </style>
  </head>
  <body>
    <h1>Just Another Snake Game</h1>
    <p>(Use WASD keys to move)</p>
    <div id="stats">
      <h3 id="points">Points: 0</h3>
    </div>
    <div id="scoresTable">
      <div class="tableHeader">Highscores.exe</div>
      <div class="scoreHeader">
        <div>Name</div>
        <div>Points</div>
      </div>
    </div>
    <div id="table"></div>
    <div id="gameOver" class="hidden">
      <div class="backdrop"></div>
      <div class="gameOverCard">
        <h1>Game Over</h1>
        <input
          name="username"
          id="username"
          class="userInput"
          placeholder="Your name"
        />
        <div class="actionButtons">
          <button class="button" id="tryAgain" onclick="tryAgain()">
            Save and try again
          </button>
        </div>
      </div>
    </div>
  </body>
  <script>
    function removeElementsByClass(className) {
      const elements = document.getElementsByClassName(className);
      while (elements.length > 0) {
        elements[0].parentNode.removeChild(elements[0]);
      }
    }
    function refreshScores() {
      const scoresTable = document.getElementById("scoresTable");
      fetch("http://modularizar.com/snake-backend")
        .then((res) => res.json())
        .then((jsonBody) => {
          if (jsonBody.length) {
            removeElementsByClass("scoreRow");
            jsonBody.forEach((score) => {
              const newScore = document.createElement("div");
              newScore.classList.add("scoreRow");
              const newScoreName = document.createElement("div");
              newScoreName.classList.add("scoreName");
              newScoreName.textContent = score.username;
              const newScorePoints = document.createElement("div");
              newScorePoints.classList.add("scorePoints");
              newScorePoints.textContent = score.points;
              newScore.append(newScoreName, newScorePoints);
              scoresTable.append(newScore);
            });
          }
        });
    }
    window.onload = () => refreshScores();

    const table = document.getElementById("table");
    const squares = [];
    for (let i = 0; i < 10; i++) {
      let row = [];
      for (let y = 0; y < 10; y++) {
        const square = document.createElement("div");
        square.setAttribute("id", `square#${i}#${y}`);
        //square.style.border = "1px solid white";
        table.append(square);
        row.push(square);
      }
      squares.push(row);
    }

    const deepCopy = (arr) => {
      let copy = [];
      arr.forEach((elem) => {
        if (Array.isArray(elem)) {
          copy.push(deepCopy(elem));
        } else {
          if (typeof elem === "object") {
            copy.push(deepCopyObject(elem));
          } else {
            copy.push(elem);
          }
        }
      });
      return copy;
    };

    const cleanSquares = (squares) => {
      squares.forEach((row) => {
        row.forEach((square) => (square.style.backgroundColor = "black"));
      });
    };

    const renderSnake = (snake, squares) => {
      snake.forEach(
        ([x, y]) => (squares[x][y].style.backgroundColor = "green")
      );
    };

    const renderApple = (appleCoordinates, squares) => {
      squares[appleCoordinates[0]][appleCoordinates[1]].style.backgroundColor =
        "red";
    };

    const renderPoints = (points) => {
      const pointsHeader = document.getElementById("points");
      pointsHeader.innerHTML = `Points: ${points}`;
    };

    const getCoordinateInReach = (coord) => {
      if (coord < 0) return 9;
      else if (coord > 9) return 0;
      else return coord;
    };

    const checkIfDead = (snakeCoordinates, newNode) =>
      snakeCoordinates.some(
        (el) => JSON.stringify(el) === JSON.stringify(newNode)
      );

    const appleIsEaten = (newNode, appleCoordinates) =>
      JSON.stringify(newNode) === JSON.stringify(appleCoordinates);

    const getRandomArbitrary = (min, max) => {
      return Math.floor(Math.random() * (max - min) + min);
    };

    const getRandCoord = () => [
      getRandomArbitrary(0, 9),
      getRandomArbitrary(0, 9),
    ];

    const getRandCoordWithoutSnake = (snakeCoordinates) => {
      let randCoord = null;
      while (
        randCoord === null ||
        snakeCoordinates.some(
          (el) => JSON.stringify(el) === JSON.stringify(randCoord)
        )
      ) {
        randCoord = getRandCoord();
      }
      return randCoord;
    };

    const runCycle = (
      _snakeCoordinates,
      direction,
      _appleCoordinates,
      _points
    ) => {
      let alive = true;
      let snakeCoordinates = deepCopy(_snakeCoordinates);
      let appleCoordinates = [..._appleCoordinates];
      let points = _points;
      let newNode;
      switch (direction) {
        case "w": {
          newNode = [
            getCoordinateInReach(snakeCoordinates[0][0] - 1),
            snakeCoordinates[0][1],
          ];
          break;
        }
        case "a": {
          newNode = [
            snakeCoordinates[0][0],
            getCoordinateInReach(snakeCoordinates[0][1] - 1),
          ];
          break;
        }
        case "s": {
          newNode = [
            getCoordinateInReach(snakeCoordinates[0][0] + 1),
            snakeCoordinates[0][1],
          ];
          break;
        }
        case "d": {
          newNode = [
            snakeCoordinates[0][0],
            getCoordinateInReach(snakeCoordinates[0][1] + 1),
          ];
          break;
        }
        default: {
          break;
        }
      }

      if (checkIfDead(snakeCoordinates, newNode)) alive = false;

      snakeCoordinates.unshift(newNode);

      if (appleIsEaten(newNode, appleCoordinates)) {
        points++;
        appleCoordinates = getRandCoordWithoutSnake(snakeCoordinates);
      }

      if (points + 2 < snakeCoordinates.length) snakeCoordinates.pop();

      return {
        alive,
        points,
        snakeCoordinates,
        appleCoordinates,
      };
    };

    const opposites = {
      w: "s",
      a: "d",
      d: "a",
      s: "w",
    };

    const validKeys = Object.keys(opposites);

    const enterListener = (e) => {
      if (e.keyCode === 13) {
        tryAgain();
      }
    };

    const showGameOverSign = (show) => {
      const gameOverSign = document.getElementById("gameOver");
      if (show) {
        gameOverSign.classList.remove("hidden");
        document.addEventListener("keypress", enterListener);
      } else gameOverSign.classList.add("hidden");
    };

    let points = 0;

    const startGame = () => {
      showGameOverSign(false);

      let snakeCoordinates = [
        [0, 1],
        [0, 0],
      ];

      points = 0;

      let direction = "d";

      let askedDirection = "d";

      let appleCoordinates = getRandCoordWithoutSnake(snakeCoordinates);

      renderSnake(snakeCoordinates, squares);

      const loop = setInterval(() => {
        cleanSquares(squares);
        renderApple(appleCoordinates, squares);
        renderPoints(points);
        if (
          askedDirection !== opposites[direction] &&
          validKeys.includes(askedDirection)
        ) {
          direction = askedDirection;
        }

        const cycle = runCycle(
          snakeCoordinates,
          direction,
          appleCoordinates,
          points
        );

        snakeCoordinates = cycle.snakeCoordinates;

        appleCoordinates = cycle.appleCoordinates;

        points = cycle.points;

        if (!cycle.alive) {
          clearInterval(loop);
          showGameOverSign(true);
        }
        renderSnake(snakeCoordinates, squares);
      }, 200);

      document.addEventListener("keypress", (e) => {
        askedDirection = e.key;
        if (e.key === "p") {
          points++;
        }
      });
    };

    function tryAgain() {
      document.removeEventListener("keypress", enterListener);
      const tryAgainButton = document.getElementById("tryAgain");
      tryAgainButton.classList.add("disabled");
      const username = document.getElementById("username").value;
      const restart = () => {
        tryAgainButton.classList.remove("disabled");
        startGame();
      };
      if (username) {
        fetch("http://modularizar.com/snake-backend", {
          method: "POST",
          body: JSON.stringify({
            username,
            points,
          }),
        }).then(() => {
          refreshScores();
          restart();
        });
      } else {
        restart();
      }
    }
    startGame();
  </script>
  <!-- Google Tag Manager -->
  <script>
    (function (w, d, s, l, i) {
      w[l] = w[l] || [];
      w[l].push({ "gtm.start": new Date().getTime(), event: "gtm.js" });
      var f = d.getElementsByTagName(s)[0],
        j = d.createElement(s),
        dl = l != "dataLayer" ? "&l=" + l : "";
      j.async = true;
      j.src = "https://www.googletagmanager.com/gtm.js?id=" + i + dl;
      f.parentNode.insertBefore(j, f);
    })(window, document, "script", "dataLayer", "GTM-TLRXF9F");
  </script>
  <!-- End Google Tag Manager -->
</html>

